# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Elixir CI

on:
  push:
    branches: [ "main" ]
  pull_request_target:
    branches: [ "main" ]

env:
  working-directory: phoenix/chat_elixir

permissions:
  contents: read

jobs:
  build:

    name: Build and test
    runs-on: ubuntu-latest

    env:
      MIX_ENV: test
      POSTGRES_HOST: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      SECRET_KEY_BASE: ${{secrets.SECRET_KEY_BASE}}
      OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Elixir
      uses: erlef/setup-beam@988e02bfe678367a02564f65ca2e37726dc0268f
      with:
        elixir-version: '1.14' # Define the elixir version [required]
        otp-version: '26' # Define the OTP version [required]
      env:
        ImageOS: ubuntu20

    - name: Restore dependencies cache
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: ${{env.working-directory}}/deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-

    - name: Install dependencies
      run: mix deps.get
      working-directory: ${{env.working-directory}}

    - name: Check dependencies
      run: mix hex.audit
      working-directory: ${{env.working-directory}}

    # Cache key based on Erlang/Elixir version and the mix.lock hash
    - name: Restore PLT cache
      id: plt_cache
      uses: actions/cache/restore@v3
      with:
        key: |
          plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-
        path: |
          ${{env.working-directory}}/priv/plts

    # Create PLTs if no cache was found
    - name: Create PLTs
      if: steps.plt_cache.outputs.cache-hit != 'true'
      run: MIX_ENV=dev mix dialyzer --plt
      working-directory: ${{env.working-directory}}

    # By default, the GitHub Cache action will only save the cache if all steps in the job succeed,
    # so we separate the cache restore and save steps in case running dialyzer fails.
    - name: Save PLT cache
      id: plt_cache_save
      uses: actions/cache/save@v3
      if: steps.plt_cache.outputs.cache-hit != 'true'
      with:
        key: |
          plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
        path: |
          ${{env.working-directory}}/priv/plts

    - name: Run dialyzer
      run: MIX_ENV=dev mix dialyzer --format github
      working-directory: ${{env.working-directory}}

    - name: Check format
      run: mix format --dry-run --check-formatted
      working-directory: ${{env.working-directory}}

    - name: Check lint
      run: mix credo list
      working-directory: ${{env.working-directory}}

    - name: Run tests
      run: mix test
      working-directory: ${{env.working-directory}}